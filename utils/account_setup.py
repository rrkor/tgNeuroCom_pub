import os
import random
import re
import sqlite3

from openai import AsyncOpenAI, OpenAI
from telethon.tl.functions.photos import UploadProfilePhotoRequest, DeletePhotosRequest
from telethon.tl.functions.account import UpdateProfileRequest, UpdateUsernameRequest, CheckUsernameRequest

from CONFIG.config_manager import load_config
from utils.account_manager import connect_account
from utils.logger import logger

config = load_config()
if not config:
    logger.error("–ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–≥—Ä—É–∑–∏—Ç—å –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—é. –ü—Ä–æ–≥—Ä–∞–º–º–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞.")
    exit(1)


DB_PATH = 'cache/channels.db'
AVATARS_FOLDER = 'avatars'
openai_api_key = config['openai_api_key']
model = config['modelapi']
USERNAME_REGEX = re.compile(r'^[a-zA-Z][a-zA-Z0-9_]{4,31}$')
bio = config['bio']

def initialize_accounts_table():
    try:
        with sqlite3.connect(DB_PATH) as conn:
            cursor = conn.cursor()
            cursor.execute('''
                CREATE TABLE IF NOT EXISTS Accounts (
                    account_name TEXT PRIMARY KEY,
                    avatar_file TEXT
                )
            ''')
            conn.commit()
            logger.info("–¢–∞–±–ª–∏—Ü–∞ Accounts —Å–æ–∑–¥–∞–Ω–∞ –∏–ª–∏ —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç.")
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ —Ç–∞–±–ª–∏—Ü—ã Accounts: {e}")

# –ê–≤–∞—Ç–∞—Ä—ã
def get_available_avatars():
    if not os.path.exists(AVATARS_FOLDER):
        logger.error(f"–ü–∞–ø–∫–∞ —Å –∞–≤–∞—Ç–∞—Ä–∫–∞–º–∏ {AVATARS_FOLDER} –Ω–µ –Ω–∞–π–¥–µ–Ω–∞.")
        return []

    avatars = [f for f in os.listdir(AVATARS_FOLDER) if f.endswith(('.jpeg', '.jpg', '.png', '.mp4'))]
    if not avatars:
        logger.error(f"–í –ø–∞–ø–∫–µ {AVATARS_FOLDER} –Ω–µ—Ç –ø–æ–¥—Ö–æ–¥—è—â–∏—Ö —Ñ–∞–π–ª–æ–≤ –¥–ª—è –∞–≤–∞—Ç–∞—Ä–æ–∫.")
    else:
        logger.info(f"–ù–∞–π–¥–µ–Ω–æ {len(avatars)} –∞–≤–∞—Ç–∞—Ä–æ–∫ –≤ –ø–∞–ø–∫–µ {AVATARS_FOLDER}.")
    return avatars
def get_random_avatar(account_name):
    avatars = get_available_avatars()
    if not avatars:
        logger.error(f"–ù–µ—Ç –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –∞–≤–∞—Ç–∞—Ä–æ–∫ –¥–ª—è –∞–∫–∫–∞—É–Ω—Ç–∞ {account_name}.")
        return None

    try:
        with sqlite3.connect('cache/channels.db') as conn:
            cursor = conn.cursor()

            # –ü–æ–ª—É—á–∞–µ–º —Å–ø–∏—Å–æ–∫ —É–∂–µ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–Ω—ã—Ö –∞–≤–∞—Ç–∞—Ä–æ–∫
            cursor.execute('SELECT avatar_file FROM Accounts')
            used_avatars = {row[0] for row in cursor.fetchall()}  # –°–æ–∑–¥–∞–µ–º –º–Ω–æ–∂–µ—Å—Ç–≤–æ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–Ω—ã—Ö –∞–≤–∞—Ç–∞—Ä–æ–∫

            # –§–∏–ª—å—Ç—Ä—É–µ–º –¥–æ—Å—Ç—É–ø–Ω—ã–µ –∞–≤–∞—Ç–∞—Ä–∫–∏, –∏—Å–∫–ª—é—á–∞—è —É–∂–µ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–Ω—ã–µ
            available_avatars = [avatar for avatar in avatars if avatar not in used_avatars]

            if not available_avatars:
                logger.error(f"–ù–µ—Ç –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –∞–≤–∞—Ç–∞—Ä–æ–∫ –¥–ª—è –∞–∫–∫–∞—É–Ω—Ç–∞ {account_name}. –í—Å–µ –∞–≤–∞—Ç–∞—Ä–∫–∏ —É–∂–µ –∏—Å–ø–æ–ª—å–∑—É—é—Ç—Å—è.")
                return None

            # –í—ã–±–∏—Ä–∞–µ–º —Å–ª—É—á–∞–π–Ω—É—é –∞–≤–∞—Ç–∞—Ä–∫—É –∏–∑ –¥–æ—Å—Ç—É–ø–Ω—ã—Ö
            avatar_file = random.choice(available_avatars)

            # –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤—ã–±—Ä–∞–Ω–Ω—É—é –∞–≤–∞—Ç–∞—Ä–∫—É –≤ –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö
            cursor.execute('INSERT OR IGNORE INTO Accounts (account_name, avatar_file) VALUES (?, ?)', (account_name, avatar_file))
            conn.commit()

            logger.info(f"–î–ª—è –∞–∫–∫–∞—É–Ω—Ç–∞ {account_name} –≤—ã–±—Ä–∞–Ω–∞ –Ω–æ–≤–∞—è –∞–≤–∞—Ç–∞—Ä–∫–∞: {avatar_file}.")
            return avatar_file
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –≤—ã–±–æ—Ä–µ –∞–≤–∞—Ç–∞—Ä–∫–∏ –¥–ª—è –∞–∫–∫–∞—É–Ω—Ç–∞ {account_name}: {e}")
        return None
async def set_account_avatar(client, avatar_path):
    try:
        logger.info(f"–ü–æ–ø—ã—Ç–∫–∞ —É–¥–∞–ª–µ–Ω–∏—è —Å—Ç–∞—Ä—ã—Ö –∞–≤–∞—Ç–∞—Ä–æ–∫ –¥–ª—è –∞–∫–∫–∞—É–Ω—Ç–∞.")
        await client(DeletePhotosRequest(await client.get_profile_photos('me')))
        logger.info(f"–°—Ç–∞—Ä—ã–µ –∞–≤–∞—Ç–∞—Ä–∫–∏ —É—Å–ø–µ—à–Ω–æ —É–¥–∞–ª–µ–Ω—ã.")

        if avatar_path.endswith(('.jpeg', '.jpg', '.png')):
            logger.info(f"–ó–∞–≥—Ä—É–∑–∫–∞ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è –≤ –∫–∞—á–µ—Å—Ç–≤–µ –∞–≤–∞—Ç–∞—Ä–∫–∏: {avatar_path}.")
            # –£–±–µ–¥–∏—Ç–µ—Å—å, —á—Ç–æ —Ñ–∞–π–ª —Å—É—â–µ—Å—Ç–≤—É–µ—Ç –∏ –¥–æ—Å—Ç—É–ø–µ–Ω
            if not os.path.exists(avatar_path):
                logger.error(f"–§–∞–π–ª –∞–≤–∞—Ç–∞—Ä–∫–∏ {avatar_path} –Ω–µ –Ω–∞–π–¥–µ–Ω.")
                return

            # –ó–∞–≥—Ä—É–∂–∞–µ–º —Ñ–∞–π–ª
            with open(avatar_path, 'rb') as file:
                uploaded_file = await client.upload_file(file)
                await client(UploadProfilePhotoRequest(file=uploaded_file))
            logger.info(f"–ê–≤–∞—Ç–∞—Ä–∫–∞ —É—Å–ø–µ—à–Ω–æ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∞: {avatar_path}.")
        elif avatar_path.endswith('.mp4'):
            logger.info(f"–ó–∞–≥—Ä—É–∑–∫–∞ –≤–∏–¥–µ–æ –≤ –∫–∞—á–µ—Å—Ç–≤–µ –∞–≤–∞—Ç–∞—Ä–∫–∏: {avatar_path}.")
            # –£–±–µ–¥–∏—Ç–µ—Å—å, —á—Ç–æ —Ñ–∞–π–ª —Å—É—â–µ—Å—Ç–≤—É–µ—Ç –∏ –¥–æ—Å—Ç—É–ø–µ–Ω
            if not os.path.exists(avatar_path):
                logger.error(f"–§–∞–π–ª –∞–≤–∞—Ç–∞—Ä–∫–∏ {avatar_path} –Ω–µ –Ω–∞–π–¥–µ–Ω.")
                return

            # –ó–∞–≥—Ä—É–∂–∞–µ–º —Ñ–∞–π–ª
            with open(avatar_path, 'rb') as file:
                uploaded_file = await client.upload_file(file)
                await client(UploadProfilePhotoRequest(video=uploaded_file))
            logger.info(f"–ê–≤–∞—Ç–∞—Ä–∫–∞ —É—Å–ø–µ—à–Ω–æ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∞: {avatar_path}.")
        else:
            logger.error(f"–ù–µ–ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ–º—ã–π —Ñ–æ—Ä–º–∞—Ç —Ñ–∞–π–ª–∞: {avatar_path}.")
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —É—Å—Ç–∞–Ω–æ–≤–∫–µ –∞–≤–∞—Ç–∞—Ä–∫–∏: {e}")

# first name) –∏ –±–∏–æ
async def update_account_profile(client, first_name, bio):
    try:
        logger.info(f"–ü–æ–ø—ã—Ç–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –ø—Ä–æ—Ñ–∏–ª—è: first_name={first_name}, bio={bio}.")
        await client(UpdateProfileRequest(
            first_name=first_name,
            about=bio
        ))
        logger.info(f"–ü—Ä–æ—Ñ–∏–ª—å —É—Å–ø–µ—à–Ω–æ –æ–±–Ω–æ–≤–ª–µ–Ω: first_name={first_name}, bio={bio}.")
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏ –ø—Ä–æ—Ñ–∏–ª—è: {e}")
def generate_firstname():
    try:
        client = OpenAI(api_key=openai_api_key)
        response = client.chat.completions.create(
            model=model,
            messages=[
                {"role": "system", "content": """ 
–ü—Ä–∏–¥—É–º–∞–π —É–Ω–∏–∫–∞–ª—å–Ω—ã–π –Ω–∏–∫–Ω–µ–π–º –¥–ª—è –ø–æ–∫–ª–æ–Ω–Ω–∏–∫–∞ –∫—Ä–∏–ø—Ç–æ–≤–∞–ª—é—Ç. –£—á–∏—Ç—ã–≤–∞–π:  
1. –°–º–µ—à–µ–Ω–∏–µ —Å—Ç–∏–ª–µ–π: —Ç–µ—Ö–Ω–∏—á–µ—Å–∫–∏–µ —Ç–µ—Ä–º–∏–Ω—ã (HODL, DeFi, NFT), –º–µ–º—ã, –∞–±—Å—É—Ä–¥, –ø–æ–ø-–∫—É–ª—å—Ç—É—Ä–∞.  
2. –í–∏–∑—É–∞–ª—å–Ω—ã–π –∫—Ä–µ–∞—Ç–∏–≤: –Ω–µ–æ–±—ã—á–Ω—ã–µ —Å–∏–º–≤–æ–ª—ã (Œû, ‚Çø, √ê), —Ä–µ–≥–∏—Å—Ç—Ä—ã (ùïÆùñóùñûùñïùñôùñî_ùï≤ùñîùñâ), ASCII-–∞—Ä—Ç, –∑–∞—á–µ—Ä–∫–∏–≤–∞–Ω–∏—è, –ø—Ä–æ–±–µ–ª—ã –≤–Ω—É—Ç—Ä–∏ —Å–ª–æ–≤.  
3. –Ø–∑—ã–∫–æ–≤—É—é –∏–≥—Ä—É: –∫–∞–ª–∞–º–±—É—Ä—ã, –ø–µ—Ä–µ–≤–æ–¥ –Ω–∞ –¥—Ä—É–≥–∏–µ —è–∑—ã–∫–∏, —Ä–µ–±—É—Å—ã (–Ω–∞–ø—Ä–∏–º–µ—Ä, ÊöóÂè∑„ÅÆÈ®éÂ£´ = Crypto Knight).  
4. –î–ª–∏–Ω—É: –æ—Ç –º–∏–Ω–∏–º–∞–ª–∏–∑–º–∞ (Œû) –¥–æ —ç–ø–∏—á–Ω—ã—Ö –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–π (TheGhostOfSatoshiHauntingFiatBanks).  
5. –ò—Ä–æ–Ω–∏—é –∏ –ø—Ä–æ–≤–æ–∫–∞—Ü–∏—é: —Å–∞–º–æ–∏—Ä–æ–Ω–∏—è —Å–æ–æ–±—â–µ—Å—Ç–≤–∞ (NFTCollectorOfUselessJPEGsSince2021).  
–ü—Ä–∏–º–µ—Ä—ã –¥–ª—è –≤–¥–æ—Ö–Ω–æ–≤–µ–Ω–∏—è: √êapposaurus_Rex, HowToLoseMoneyIn10Coins, ‡ºíSÃæhÃæiÃælÃælÃæiÃænÃægÃæ‡ºí.  
–°–≥–µ–Ω–µ—Ä–∏—Ä—É–π –û–î–ò–ù –Ω–∏–∫–Ω–µ–π–º, –∏–∑–±–µ–≥–∞—è —à–∞–±–ª–æ–Ω–æ–≤. –ß–µ–º –∞–±—Å—É—Ä–¥–Ω–µ–µ –∏ –º–Ω–æ–≥–æ–≥—Ä–∞–Ω–Ω–µ–µ ‚Äî —Ç–µ–º –ª—É—á—à–µ!  
"""},
            ],
            max_tokens=10,
            n=1,
            stop=None,
            temperature=0.7,
        )
        username = response.choices[0].message.content.strip()
        logger.info(f"–°–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–Ω —é–∑–µ—Ä–Ω–µ–π–º —Å –ø–æ–º–æ—â—å—é ChatGPT: {username}")
        return username
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ —é–∑–µ—Ä–Ω–µ–π–º–∞ —Å –ø–æ–º–æ—â—å—é ChatGPT: {e}")
        return None





def is_valid_username(username):
    if not username:
        return False
    return bool(USERNAME_REGEX.match(username))
async def is_username_available(client, username):
    try:
        result = await client(CheckUsernameRequest(username))
        return result
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø—Ä–æ–≤–µ—Ä–∫–µ —É–Ω–∏–∫–∞–ª—å–Ω–æ—Å—Ç–∏ —é–∑–µ—Ä–Ω–µ–π–º–∞ {username}: {e}")
        return False
def generate_username():
    try:
        client = OpenAI(api_key=openai_api_key)
        response = client.chat.completions.create(
            model=model,
            messages=[
                {"role": "system", "content": """Generate a unique and creative Telegram username (without the @ symbol).
                 It should be 6-12 characters long, start with a letter, and contain only letters (not capital), 
                 numbers, or underscores. Moreover, it can be relates on cryptocurrency or blockchain. 
                 But make it creative and various please. As an answer just write one username."""},
            ],
            max_tokens=12,
            n=1,
            stop=None,
            temperature=0.7,
        )
        username = response.choices[0].message.content.strip()
        logger.info(f"–°–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–Ω —é–∑–µ—Ä–Ω–µ–π–º —Å –ø–æ–º–æ—â—å—é ChatGPT: {username}")
        return username
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ —é–∑–µ—Ä–Ω–µ–π–º–∞ —Å –ø–æ–º–æ—â—å—é ChatGPT: {e}")
        return None
async def generate_unique_username(client):
    max_attempts = 20
    for _ in range(max_attempts):
        username = generate_username()
        if not username:
            logger.warning("–ù–µ —É–¥–∞–ª–æ—Å—å —Å–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞—Ç—å —é–∑–µ—Ä–Ω–µ–π–º. –ü–æ–≤—Ç–æ—Ä–Ω–∞—è –ø–æ–ø—ã—Ç–∫–∞...")
            continue

        if not is_valid_username(username):
            logger.warning(f"–Æ–∑–µ—Ä–Ω–µ–π–º {username} –Ω–µ —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É–µ—Ç —Å–∏–Ω—Ç–∞–∫—Å–∏—Å—É Telegram.")
            continue

        if await is_username_available(client, username):
            logger.info(f"–Æ–∑–µ—Ä–Ω–µ–π–º {username} –¥–æ—Å—Ç—É–ø–µ–Ω –¥–ª—è –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è.")
            return username
        else:
            logger.warning(f"–Æ–∑–µ—Ä–Ω–µ–π–º {username} —É–∂–µ –∑–∞–Ω—è—Ç.")

    logger.error("–ù–µ —É–¥–∞–ª–æ—Å—å —Å–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞—Ç—å —É–Ω–∏–∫–∞–ª—å–Ω—ã–π —é–∑–µ—Ä–Ω–µ–π–º –ø–æ—Å–ª–µ –Ω–µ—Å–∫–æ–ª—å–∫–∏—Ö –ø–æ–ø—ã—Ç–æ–∫.")
    return None
async def update_account_username(client, new_username):
    try:
        logger.info(f"–ü–æ–ø—ã—Ç–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è —é–∑–µ—Ä–Ω–µ–π–º–∞ –Ω–∞: @{new_username}.")
        await client(UpdateUsernameRequest(new_username))
        logger.info(f"–Æ–∑–µ—Ä–Ω–µ–π–º —É—Å–ø–µ—à–Ω–æ –æ–±–Ω–æ–≤–ª–µ–Ω: @{new_username}.")
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏ —é–∑–µ—Ä–Ω–µ–π–º–∞: {e}")






async def setup_account(account, proxy_manager):
    account_folder = account['account_folder']
    account_name = os.path.basename(account_folder)

    logger.info(f"–ù–∞—á–∞–ª–æ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –∞–∫–∫–∞—É–Ω—Ç–∞: {account_name}.")

    # –ü–æ–ª—É—á–∞–µ–º —Å–ª—É—á–∞–π–Ω—É—é –∞–≤–∞—Ç–∞—Ä–∫—É –¥–ª—è –∞–∫–∫–∞—É–Ω—Ç–∞
    avatar_file = get_random_avatar(account_name)
    if not avatar_file:
        logger.error(f"–ù–µ —É–¥–∞–ª–æ—Å—å –≤—ã–±—Ä–∞—Ç—å –∞–≤–∞—Ç–∞—Ä–∫—É –¥–ª—è –∞–∫–∫–∞—É–Ω—Ç–∞ {account_name}.")
        return

    avatar_path = os.path.join(AVATARS_FOLDER, avatar_file)
    logger.info(f"–ê–≤–∞—Ç–∞—Ä–∫–∞ –¥–ª—è –∞–∫–∫–∞—É–Ω—Ç–∞ {account_name}: {avatar_path}.")

    # –ü–æ–¥–∫–ª—é—á–∞–µ–º—Å—è –∫ –∞–∫–∫–∞—É–Ω—Ç—É
    client = await connect_account(account, proxy_manager)
    if not client:
        logger.error(f"–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–¥–∫–ª—é—á–∏—Ç—å—Å—è –∫ –∞–∫–∫–∞—É–Ω—Ç—É {account_name}.")
        return

    # –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –∞–≤–∞—Ç–∞—Ä–∫—É
    await set_account_avatar(client, avatar_path)

    #first name –∏ –±–∏–æ
    new_first_name = generate_username()

    new_bio = config['bio']
    await update_account_profile(client, new_first_name, new_bio)

    # –ì–µ–Ω–µ—Ä–∞—Ü–∏—è –∏ —É—Å—Ç–∞–Ω–æ–≤–∫–∞ —É–Ω–∏–∫–∞–ª—å–Ω–æ–≥–æ —é–∑–µ—Ä–Ω–µ–π–º–∞
    new_username = await generate_unique_username(client)
    if new_username:  # –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞ None
        await update_account_username(client, new_username)
    else:
        logger.error(f"–ù–µ —É–¥–∞–ª–æ—Å—å —É—Å—Ç–∞–Ω–æ–≤–∏—Ç—å —é–∑–µ—Ä–Ω–µ–π–º –¥–ª—è –∞–∫–∫–∞—É–Ω—Ç–∞ {account_name}.")

    # –î–æ–±–∞–≤–ª—è–µ–º –∞–∫–∫–∞—É–Ω—Ç –≤ –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö
    with sqlite3.connect('cache/channels.db') as conn:
        cursor = conn.cursor()
        cursor.execute('INSERT OR IGNORE INTO Accounts (account_name, avatar_file) VALUES (?, ?)', (account_name, avatar_file))
        conn.commit()

    # –ó–∞–∫—Ä—ã–≤–∞–µ–º —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–µ
    await client.disconnect()
    logger.info(f"–ù–∞—Å—Ç—Ä–æ–π–∫–∞ –∞–∫–∫–∞—É–Ω—Ç–∞ {account_name} –∑–∞–≤–µ—Ä—à–µ–Ω–∞.")
